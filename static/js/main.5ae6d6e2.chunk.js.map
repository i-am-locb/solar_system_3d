{"version":3,"sources":["Components/Warning/Warning.module.css","Components/Navigation/Navigation.module.css","Components/InfoBar/InfoBar.module.css","Textures/Sun.jpg","Components/Sun.js","Components/Lights.js","API/API_SolarSystem.js","Redux/Planets/planets_AC.js","Components/Planet/Ecliptic.js","Components/Planet/Planet.js","Components/Stars.js","Components/Warning/Warning.js","Redux/Confirm/confirm_AC.js","Redux/Confirm/confirm_reducer.js","Redux/Planets/planets_reducer.js","Textures/Mercury.jpg","Textures/Venus.jpg","Textures/Earth.jpg","Textures/Mars.jpg","Textures/Jupiter.jpg","Textures/Saturn.jpg","Textures/Uranus.jpg","Textures/Neptune.jpg","Redux/PlanetsInfo/planets_info_reducer.js","Redux/Store.js","API/API_Wikipedia.js","Components/Navigation/Navigation.js","Redux/PlanetsInfo/planets_info_AC.js","Components/InfoBar/InfoBar.js","App.js","index.js"],"names":["module","exports","Sun","texture","useLoader","THREE","sunMap","args","map","Lights","dot","intensity","position","color","distance","instance","axios","withCredentials","baseURL","planetsAPI","get","random","a","b","Math","zoomPlanet","name","dispatch","type","PI","Ecliptic","xRadius","zRadius","points","index","angle","x","cos","z","sin","push","lineGeometry","setFromPoints","geometry","attach","linewidth","Planet","textureMap","planet","englishName","aphelion","perihelion","equaRadius","zoomed","speed","offset","rotationSpeed","textures","axialTilt","forEach","element","includes","planetScale","orbitScale","planetRef","React","useRef","useFrame","clock","camera","tPlanet","getElapsedTime","xPlanet","zPlanet","current","rotation","y","xCamera","sqrt","zCamera","lerp","lookAt","ref","onClick","StarSky","Stars","radius","depth","count","factor","saturation","fade","Warning","props","useDispatch","className","styles","warning","warningBlock","h1","text","button","isConfirm","then","response","arr","data","bodies","sort","prev","next","i","length","initialState","confirmReducer","state","action","planets","solarSystemDataReducer","p","planetsInfo","link","title","planetInfoReducer","reducers","combineReducers","solarSystemData","confirmed","planetInfo","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","planetsInfoAPI","Navigation","useSelector","navigation","selected","console","log","obj","query","pages","property","extract","pageid","id","InfoBar","bar","infoBar","dangerouslySetInnerHTML","__html","href","target","App","fov","fallback","Loader","OrbitControls","useProgress","active","progress","errors","item","loaded","total","Html","center","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ae6d6e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"warning\":\"Warning_warning__102qO\",\"warningBlock\":\"Warning_warningBlock__2A8Oj\",\"h1\":\"Warning_h1__2XTZd\",\"text\":\"Warning_text__D_jT4\",\"button\":\"Warning_button__2Xmow\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__1ty22\",\"planet\":\"Navigation_planet__EeDhu\",\"selected\":\"Navigation_selected__3y6Xn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"InfoBar_bar__2h8V0\",\"infoBar\":\"InfoBar_infoBar__1K6pK\"};","export default __webpack_public_path__ + \"static/media/Sun.b34e6ead.jpg\";","import { useLoader } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport React from \"react\";\r\n\r\nimport sunMap from \"../Textures/Sun.jpg\";\r\n\r\n// TODO Добавить вращение, вынести радиус в стейт\r\n\r\nexport default function Sun() {\r\n  const texture = useLoader(THREE.TextureLoader, sunMap);\r\n\r\n  return (\r\n    <mesh>\r\n      <sphereGeometry args={[0.696342, 32, 32]} />\r\n      <meshStandardMaterial map={texture} />\r\n    </mesh>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Lights() {\r\n  let dot = 1.25\r\n  return (\r\n    <>\r\n      {/* Global Light */}\r\n      <ambientLight intensity={0.15} />\r\n      {/* Planets Light */}\r\n      <pointLight position={[0, 0, 0]} />\r\n      {/* Sun Light */}\r\n      <pointLight\r\n        color=\"#f6f3ea\"\r\n        position={[dot, 0, 0]}\r\n        intensity={2}\r\n        distance={dot}\r\n      />\r\n      <pointLight\r\n        color=\"#f6f3ea\"\r\n        position={[0, dot, 0]}\r\n        intensity={2}\r\n        distance={dot}\r\n      />\r\n      <pointLight\r\n        color=\"#f6f3ea\"\r\n        position={[0, 0, dot]}\r\n        intensity={2}\r\n        distance={dot}\r\n      />\r\n      <pointLight\r\n        color=\"#f6f3ea\"\r\n        position={[-dot, 0, 0]}\r\n        intensity={2}\r\n        distance={dot}\r\n      />\r\n      <pointLight\r\n        color=\"#f6f3ea\"\r\n        position={[0, -dot, 0]}\r\n        intensity={2}\r\n        distance={dot}\r\n      />\r\n      <pointLight\r\n        color=\"#f6f3ea\"\r\n        position={[0, 0, -dot]}\r\n        intensity={2}\r\n        distance={dot}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: false,\r\n    baseURL: \"https://api.le-systeme-solaire.net/rest.php/bodies/\"\r\n})\r\n\r\nexport const planetsAPI = {\r\n    getPlanets(){\r\n        return instance.get('?filter%5B%5D=isPlanet%2Cneq%2Cfalse&filter%5B%5D=id%2Cneq%2Cceres&filter%5B%5D=id%2Cneq%2Ceris&filter%5B%5D=id%2Cneq%2Chaumea&filter%5B%5D=id%2Cneq%2Cmakemake&filter%5B%5D=id%2Cneq%2Cpluton')\r\n            \r\n    }\r\n}","import { planetsAPI } from \"../../API/API_SolarSystem\";\r\n\r\nconst random = (a, b) => a + Math.random() * b;\r\n\r\n// export const getPlanets = () => {\r\n//   return (dispatch) => {\r\n//     planetsAPI.getPlanets().then((response) => {\r\n//       dispatch({\r\n//         type: \"SET_PLANETS\",\r\n//         planets: response.data.bodies,\r\n//       });\r\n//     });\r\n//   };\r\n// };\r\n\r\nexport const getPlanets = () => {\r\n  return (dispatch) => {\r\n    planetsAPI.getPlanets().then((response) => {\r\n      let arr = response.data.bodies\r\n      arr.sort((prev, next) => prev.aphelion - next.aphelion)\r\n      for (let i = 0; i < arr.length; i++) {\r\n        dispatch({\r\n          type: \"ADD_PLANET\",\r\n          planet: response.data.bodies[i],\r\n          speed: random(0.005, 0.015),\r\n          offset: random(0, Math.PI * 2),\r\n          rotationSpeed: random(0.001, 0.003),\r\n        })\r\n      }\r\n\r\n    });\r\n  };\r\n};\r\n\r\nexport const zoomPlanet = (name) => {\r\n  return (dispatch) => {\r\n    dispatch({type: 'OFF_ZOOM'})\r\n    dispatch({type: 'ZOOM', name: name})\r\n  }\r\n}\r\n\r\n\r\n\r\nconst speed = random(0.005, 0.015);\r\nconst offset = random(0, Math.PI * 2);\r\nconst rotationSpeed = random(0.001, 0.003);","import * as THREE from \"three\";\r\n\r\nfunction Ecliptic({ xRadius = 1, zRadius = 1 }) {\r\n  const points = [];\r\n  for (let index = 0; index < 64; index++) {\r\n    const angle = (index / 64) * 2 * Math.PI;\r\n    const x = xRadius * Math.cos(angle);\r\n    const z = zRadius * Math.sin(angle);\r\n    points.push(new THREE.Vector3(x, 0, z));\r\n  }\r\n  points.push(points[0]);\r\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\r\n  return (\r\n    <line geometry={lineGeometry}>\r\n      <lineBasicMaterial attach=\"material\" color=\"#454545\" linewidth={0.5} />\r\n    </line>\r\n  );\r\n}\r\n\r\nexport default Ecliptic;\r\n","import { useFrame, useLoader, addTail } from \"@react-three/fiber\";\r\nimport React from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { zoomPlanet } from \"../../Redux/Planets/planets_AC\";\r\nimport Ecliptic from \"./Ecliptic\";\r\n\r\n// TODO Разобраться как работают кватернионы у камеры\r\n\r\nexport default function Planet({\r\n  planet: { englishName, aphelion, perihelion, equaRadius, zoomed, speed, offset, rotationSpeed, axialTilt },\r\n  textures,\r\n  dispatch,\r\n}) {\r\n\r\n  // TODO понять ка исправить\r\n  let textureMap;\r\n  textures.forEach((element) => {\r\n    if (element.includes(\"\" + englishName + \"\")) {\r\n      textureMap = element;\r\n    }\r\n  });\r\n\r\n  const planetScale = 100000; // 100000\r\n  const orbitScale = 50000000;\r\n  /////////////////////\r\n\r\n  const texture = useLoader(THREE.TextureLoader, textureMap);\r\n  // console.log(texture)\r\n\r\n  const planetRef = React.useRef();\r\n\r\n  useFrame(({ clock, camera }) => {\r\n    const tPlanet = clock.getElapsedTime() * speed + offset;\r\n    const xPlanet = (aphelion / orbitScale + 0.696342) * Math.sin(tPlanet);\r\n    const zPlanet = (perihelion / orbitScale + 0.696342) * Math.cos(tPlanet);\r\n    planetRef.current.position.x = xPlanet;\r\n    planetRef.current.position.z = zPlanet;\r\n    planetRef.current.rotation.y += rotationSpeed;\r\n\r\n    if (zoomed) {\r\n      const xCamera =\r\n        xPlanet +\r\n        equaRadius / planetScale +\r\n        Math.sqrt(equaRadius / planetScale);\r\n      const zCamera =\r\n        zPlanet +\r\n        equaRadius / planetScale +\r\n        Math.sqrt(equaRadius / planetScale);\r\n      camera.position.lerp(new THREE.Vector3(xCamera, 0.1, zCamera), 0.01);\r\n      camera.lookAt(xPlanet, 0, zPlanet);\r\n      // camera.quaternion.set(xPlanet, 0.4, zPlanet, 1)\r\n      // camera.quaternion.slerp(new THREE.Vector3(xPlanet, 1, zPlanet), 0.1);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <mesh ref={planetRef} onClick={() => dispatch(zoomPlanet(englishName))}>\r\n        <sphereGeometry args={[equaRadius / planetScale, 100, 100]} />\r\n        <meshStandardMaterial map={texture} />\r\n      </mesh>\r\n      <Ecliptic\r\n        xRadius={aphelion / orbitScale + 0.696342}\r\n        zRadius={perihelion / orbitScale + 0.696342}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import { Stars } from \"@react-three/drei\";\r\n\r\nexport default function StarSky() {\r\n    return (<Stars radius={300} depth={60} count={20000} factor={7} saturation={0} fade={true}/>);\r\n  }","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toggleConfirm } from \"../../Redux/Confirm/confirm_AC\";\r\nimport { getPlanets } from \"../../Redux/Planets/planets_AC\";\r\nimport styles from \"./Warning.module.css\";\r\n\r\nexport default function Warning(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.warning}>\r\n        <div className={styles.warningBlock}>\r\n          <h1 className={styles.h1}>Warning</h1>\r\n          <p className={styles.text}>Don't use mobile traffic!</p>\r\n          <button\r\n            className={styles.button}\r\n            onClick={() => {\r\n              dispatch(toggleConfirm());\r\n              dispatch(getPlanets());\r\n            }}\r\n          >\r\n            OK\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","export const toggleConfirm = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"TOGGLE_CONFIRM\", isConfirm: true });\r\n  };\r\n};\r\n","let initialState = {\r\n  isConfirm: false,\r\n};\r\n\r\nconst confirmReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"TOGGLE_CONFIRM\": {\r\n        return {\r\n            ...state,\r\n            isConfirm: action.isConfirm\r\n        }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default confirmReducer\r\n\r\n","import Mercury from \"../../Textures/Mercury.jpg\";\r\nimport Venus from \"../../Textures/Venus.jpg\";\r\nimport Earth from \"../../Textures/Earth.jpg\";\r\n// import EarthCloudsMap from \"../../Textures/EarthClouds.jpg\";\r\nimport Mars from \"../../Textures/Mars.jpg\";\r\nimport Jupiter from \"../../Textures/Jupiter.jpg\";\r\nimport Saturn from \"../../Textures/Saturn.jpg\";\r\nimport Uranus from \"../../Textures/Uranus.jpg\";\r\nimport Neptune from \"../../Textures/Neptune.jpg\";\r\n\r\nconst initialState = {\r\n  planets: [],\r\n  textures: [Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune],\r\n};\r\n\r\nconst solarSystemDataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // case \"SET_PLANETS\": {\r\n    //   return {\r\n    //     ...state,\r\n    //     planets: [\r\n    //       ...action.planets.map((p) => {\r\n    //         return {\r\n    //           ...p,\r\n    //           zoomed: false,\r\n    //         };\r\n    //       }),\r\n    //     ],\r\n    //   };\r\n    // }\r\n    case \"ADD_PLANET\": {\r\n      return {\r\n        ...state,\r\n        planets: [\r\n          ...state.planets,\r\n          {\r\n            ...action.planet,\r\n            speed: action.speed,\r\n            offset: action.offset,\r\n            rotationSpeed: action.rotationSpeed,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n    case \"OFF_ZOOM\": {\r\n      return {\r\n        ...state,\r\n        planets: [\r\n          ...state.planets.map((p) => {\r\n            return {\r\n              ...p,\r\n              zoomed: false,\r\n            };\r\n          }),\r\n        ],\r\n      };\r\n    }\r\n    case \"ZOOM\": {\r\n      return {\r\n        ...state,\r\n        planets: [\r\n          ...state.planets.map((p) => {\r\n            if (p.englishName === action.name) {\r\n              return {\r\n                ...p,\r\n                zoomed: true,\r\n              };\r\n            }\r\n            return p;\r\n          }),\r\n        ],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default solarSystemDataReducer;\r\n","export default __webpack_public_path__ + \"static/media/Mercury.b3bc4c35.jpg\";","export default __webpack_public_path__ + \"static/media/Venus.a2b5dff8.jpg\";","export default __webpack_public_path__ + \"static/media/Earth.54672c1f.jpg\";","export default __webpack_public_path__ + \"static/media/Mars.a4802994.jpg\";","export default __webpack_public_path__ + \"static/media/Jupiter.b3729a97.jpg\";","export default __webpack_public_path__ + \"static/media/Saturn.afe61e83.jpg\";","export default __webpack_public_path__ + \"static/media/Uranus.428ad3f9.jpg\";","export default __webpack_public_path__ + \"static/media/Neptune.6dd11266.jpg\";","const initialState = {\r\n  planetsInfo: null,\r\n  zoomed: false,\r\n  link: null,\r\n  title: null,\r\n};\r\n\r\nconst planetInfoReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_PLANET_INFO\": {\r\n      return { \r\n        ...state,\r\n        text: action.text,\r\n        link: action.link,\r\n        title: action.title\r\n      };\r\n    }\r\n    case 'ENABLE_ZOOM': {\r\n      return { \r\n        ...state,\r\n        zoomed: true \r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default planetInfoReducer;\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport confirmReducer from \"./Confirm/confirm_reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport solarSystemDataReducer from \"./Planets/planets_reducer\";\r\nimport planetInfoReducer from \"./PlanetsInfo/planets_info_reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n  solarSystemData: solarSystemDataReducer,\r\n  confirmed: confirmReducer,\r\n  planetInfo: planetInfoReducer,\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store;\r\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: false,\r\n  baseURL:\r\n    \"https://en.wikipedia.org/w/api.php?action=query&origin=*&prop=extracts&format=json&&exintro=\",\r\n});\r\n\r\nexport const planetsInfoAPI = {\r\n  getPlanetsInfo(name) {\r\n    return instance.get(`&titles=` + name);\r\n  },\r\n};\r\n\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { zoomPlanet } from \"../../Redux/Planets/planets_AC\";\r\nimport { enableZoom, getPlanetsInfo } from \"../../Redux/PlanetsInfo/planets_info_AC\";\r\nimport styles from \"./Navigation.module.css\";\r\n\r\nexport default function Navigation() {\r\n  const planets = useSelector((state) => state.solarSystemData.planets);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <div className={styles.navigation}>\r\n        {planets.map((p) => (\r\n          <button\r\n            className={p.zoomed ? styles.selected : styles.planet}\r\n            onClick={() => {\r\n              dispatch(zoomPlanet(p.englishName));\r\n              dispatch(enableZoom());\r\n              dispatch(getPlanetsInfo(p.englishName));\r\n            }}\r\n            key={p.id}\r\n          >\r\n            {p.englishName}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { planetsInfoAPI } from \"../../API/API_Wikipedia\";\r\n\r\nexport const getPlanetsInfo = (name) => {\r\n    return (dispatch) => {\r\n      planetsInfoAPI.getPlanetsInfo(name).then((response) => {\r\n        \r\n        console.log(response)\r\n          let obj = response.data.query.pages\r\n          for (const property in obj ){\r\n            dispatch({\r\n                type: \"ADD_PLANET_INFO\",\r\n                text: obj[property].extract,\r\n                link: \"https://en.wikipedia.org/?curid=\" + obj[property].pageid,\r\n                title: obj[property].title\r\n            })\r\n          }\r\n        })\r\n    }\r\n}\r\n\r\nexport const enableZoom = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"ENABLE_ZOOM\"\r\n    })\r\n  }\r\n}\r\n  ","import { useSelector } from \"react-redux\";\r\nimport styles from \"./InfoBar.module.css\";\r\n\r\nexport default function InfoBar() {\r\n  const text = useSelector((state) => state.planetInfo.text);\r\n  const zoomed = useSelector((state) => state.planetInfo.zoomed);\r\n  const link = useSelector((state) => state.planetInfo.link);\r\n  const title = useSelector((state) => state.planetInfo.title);\r\n  if (zoomed) {\r\n    return (\r\n      <>\r\n        <div className={styles.bar}>\r\n          <h1>{title}</h1>\r\n          <div\r\n            className={styles.infoBar}\r\n            dangerouslySetInnerHTML={{ __html: text }}\r\n          ></div>\r\n          <a href={link} target=\"_blank\">Read more...</a>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  if (!zoomed) {\r\n    return <></>;\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Html, OrbitControls, useProgress } from \"@react-three/drei\";\nimport Sun from \"./Components/Sun\";\nimport Lights from \"./Components/Lights\";\nimport Planet from \"./Components/Planet/Planet\";\nimport StarSky from \"./Components/Stars\";\nimport Warning from \"./Components/Warning/Warning\";\nimport { Provider, useDispatch, useSelector } from \"react-redux\";\nimport store from \"./Redux/Store\";\nimport Navigation from \"./Components/Navigation/Navigation\";\nimport InfoBar from \"./Components/InfoBar/InfoBar\";\n\nexport default function App(props) {\n  const isConfirm = useSelector((state) => state.confirmed.isConfirm);\n  const planets = useSelector((state) => state.solarSystemData.planets);\n  const textures = useSelector((state) => state.solarSystemData.textures);\n\n  const dispatch = useDispatch();\n\n  if (!isConfirm) {\n    return <Warning />;\n  }\n  if (isConfirm) {\n    return (\n      <>\n        <Canvas camera={{ position: [0, 20, 65], fov: 45 }}>\n          <Suspense fallback={<Loader />}>\n            <Provider store={store}>\n            <Sun />\n            <StarSky />\n              {planets.map((planet) => (\n                <Planet\n                  dispatch={dispatch}\n                  planet={planet}\n                  textures={textures}\n                  key={planet.id}\n                />\n              ))}\n            <Lights />\n            <OrbitControls />\n            </Provider>\n          </Suspense>\n        </Canvas>\n        <InfoBar />\n        <Navigation />\n      </>\n    );\n  }\n}\n\nfunction Loader() {\n  const { active, progress, errors, item, loaded, total } = useProgress();\n  console.log({active, progress, errors, item, loaded, total});\n  return <Html center>{progress} % loaded</Html>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./Redux/Store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}